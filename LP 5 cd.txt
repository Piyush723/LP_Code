DFS

#include <iostream>
#include <vector> #include <omp.h> using namespace std;
void parallelDFS(vector<vector<int>>& graph, int current, vector<bool>& visited) {     visited[current] = true;     cout << "Visited vertex: " << current << endl;
    #pragma omp parallel for
    for (int i = 0; i < graph[current].size(); ++i) {         int neighbor = graph[current][i];
        if (!visited[neighbor]) {             #pragma omp task
            parallelDFS(graph, neighbor, visited);
        }
    }
}
void parallelDFSWrapper(vector<vector<int>>& graph) {
    int numVertices = graph.size();     vector<bool> visited(numVertices, false);
    #pragma omp parallel
    {
        #pragma omp single nowait
        parallelDFS(graph, 0, visited);
    }
}
int main() {     int numVertices = 7;     vector<vector<int>> graph(numVertices);
    // Add edges to the graph     graph[0] = {1, 2};     graph[1] = {0, 3, 4};     graph[2] = {0, 5, 6};     graph[3] = {1};     graph[4] = {1};     graph[5] = {2};
    graph[6] = {2};     parallelDFSWrapper(graph);
    return 0;




BUBBLE SORT
#include <iostream>
#include <vector>
#include <omp.h>
void parallelBubbleSort(std::vector<int>& arr) {
int n = arr.size();
bool swapped;
#pragma omp parallel
{
do {
swapped = false;
#pragma omp for
for (int i = 0; i < n - 1; i++) {
if (arr[i] > arr[i + 1]) {
std::swap(arr[i], arr[i + 1]);
swapped = true;
}
}
} while (swapped);
}
}
int main() {
std::vector<int> numbers = {5, 2, 8, 12, 3};
std::cout << "Before sorting: ";
for (int num : numbers) {
std::cout << num << " ";
}
std::cout << std::endl;
parallelBubbleSort(numbers);
std::cout << "After sorting: ";
for (int num : numbers) {
std::cout << num << " ";
}
std::cout << std::endl;
return 0;
}

MIN MAX

#include <iostream>
#include <vector>
#include <omp.h>
void parallelReduction(const std::vector<int>& arr, int& minVal, int& maxVal, int& sum, double&
average) {
int n = arr.size();
int localMin = arr[0];
int localMax = arr[0];
int localSum = 0;
#pragma omp parallel for reduction(min : localMin) reduction(max : localMax) reduction(+:
localSum)
for (int i = 0; i < n; i++) {
localMin = std::min(localMin, arr[i]);
localMax = std::max(localMax, arr[i]);
localSum += arr[i];
}
minVal = localMin;
maxVal = localMax;
sum = localSum;
average = static_cast<double>(localSum) / n;
}
int main() {
int n;
std::cout << "Enter the number of elements: ";
std::cin >> n;
std::vector<int> numbers(n);
std::cout << "Enter the elements: ";
for (int i = 0; i < n; i++) {
std::cin >> numbers[i];
}
int minVal, maxVal, sum;
double average;
parallelReduction(numbers, minVal, maxVal, sum, average);
std::cout << "Min: " << minVal << std::endl;
std::cout << "Max: " << maxVal << std::endl;
std::cout << "Sum: " << sum << std::endl;
std::cout << "Average: " << average << std::endl;
