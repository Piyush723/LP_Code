#-------Depth first search-------
'''graph={'A':['B','C'],
       'B':['C','D'],
       'C':['X'],
       'D':['v']}

visited=set()
def dfs(visited,graph,node):
    if node not in visited:
        print(node)
        visited.add(node)
        for i in graph[node]:
            dfs(visited,graph,i)
print("Here is the depth-first search")
dfs(visited,graph,'B')'''



#------Breadth first serach------
'''graph = {
'A' : ['B','C'],
'B' : ['D', 'E'],
'C' : ['F'],
'D' : [],
'E' : ['F'],
'F' : []
}

visited=[]
queue=[]
def Bfs(visited,graph,node):
    visited.append(node)
    queue.append(node)

    while queue:
        m=queue.pop(0)
        print(m,end=" ")
        for i in graph[m]:
            if i not in visited:
                visited.append(i)
                queue.append(i)

print('breadth first search is below')
Bfs(visited,graph,'C')'''

#-----N Queen Problem-----
n = int(input("Enter the value of n"))
board = []


def getBoard():
    for i in range(n):
        nthList = []
        for j in range(n):
            nthList.append(0)
        board.append(nthList)


def printBoard():
    for i in range(n):
        for j in range(n):
            print(board[i][j], end=" ")
        print("")


def isSafe(row, col):
    for i in range(n):
        if board[row][i] == 1:
            return False
    for j in range(n):
        if board[j][col] == 1:
            return False

    i = row - 1
    j = col - 1
    while (i >= 0 and j >= 0):
        if board[i][j] == 1:
            return False
        i = i - 1
        j = j - 1

    i = row - 1
    j = col + 1
    while (i >= 0 and j < n):
        if board[i][j] == 1:
            return False
        i = i - 1
        j = j + 1

    i = row + 1
    j = col - 1
    while (i < n and j >= 0):
        if board[i][j] == 1:
            return False
        i = i + 1
        j = j - 1

    i = row + 1
    j = col + 1
    while (i < n and j < n):
        if board[i][j] == 1:
            return False
        i = i + 1
        j = j + 1
    return True


def Put(n, count):
    if count == n:
        return True
    for i in range(n):
        for j in range(n):
            if isSafe(i, j):
                board[i][j] = 1
                count = count + 1
                if Put(n, count) == True:
                    return True
                board[i][j] = 0
                count = count - 1
    return False


getBoard()
Put(n, 0)
printBoard()

#----Krushkals algorithm-----

class Graph:
    def __init__(self, vertex):
        self.V = vertex
        self.graph = []
 
    def add_edge(self, u, v, w):
        self.graph.append([u, v, w])
 
 
    def search(self, parent, i):
        if parent[i] == i:
            return i
        return self.search(parent, parent[i])
 
    def apply_union(self, parent, rank, x, y):
        xroot = self.search(parent, x)
        yroot = self.search(parent, y)
        if rank[xroot] < rank[yroot]:
            parent[xroot] = yroot
        elif rank[xroot] > rank[yroot]:
            parent[yroot] = xroot
        else:
            parent[yroot] = xroot
            rank[xroot] += 1
 
  
    def kruskal(self):
        result = []
        i, e = 0, 0
        self.graph = sorted(self.graph, key=lambda item: item[2])
        parent = []
        rank = []
        for node in range(self.V):
            parent.append(node)
            rank.append(0)
        while e < self.V - 1:
            u, v, w = self.graph[i]
            i = i + 1
            x = self.search(parent, u)
            y = self.search(parent, v)
            if x != y:
                e = e + 1
                result.append([u, v, w])
                self.apply_union(parent, rank, x, y)
        for u, v, weight in result:
            print("Edge:",u, v,end =" ")
            print("-",weight)
 
 
g = Graph(5)
g.add_edge(0, 1, 8)
g.add_edge(0, 2, 5)
g.add_edge(1, 2, 9)
g.add_edge(1, 3, 11)
g.add_edge(2, 3, 15)
g.add_edge(2, 4, 10)
g.add_edge(3, 4, 7)
g.kruskal()

#---------Tic Tac Toe (star algo) CODE------
def sum(a, b, c ):
	return a + b + c
def printBoard(xState, zState):
	zero = 'X' if xState[0] else ('O' if zState[0] else 0)
	one = 'X' if xState[1] else ('O' if zState[1] else 1)
	two = 'X' if xState[2] else ('O' if zState[2] else 2)
	three = 'X' if xState[3] else ('O' if zState[3] else 3)
	four = 'X' if xState[4] else ('O' if zState[4] else 4)
	five = 'X' if xState[5] else ('O' if zState[5] else 5)
	six = 'X' if xState[6] else ('O' if zState[6] else 6)
	seven = 'X' if xState[7] else ('O' if zState[7] else 7)
	eight = 'X' if xState[8] else ('O' if zState[8] else 8)
	print(f"{zero} | {one} | {two} ")
	print(f"--|---|---")
	print(f"{three} | {four} | {five} ")
	print(f"--|---|---")
	print(f"{six} | {seven} | {eight} ")
def checkWin(xState, zState):
	wins = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 	4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]
	for win in wins:
		if(sum(xState[win[0]], xState[win[1]], 					xState[win[2]]) == 3):
			print("X Won the match")
			return 1
		if(sum(zState[win[0]], zState[win[1]], 					zState[win[2]]) == 3):
			print("O Won the match")
			return 0
		return -1
if __name__ == "__main__":
	xState = [0, 0, 0, 0, 0, 0, 0, 0, 0]
	zState = [0, 0, 0, 0, 0, 0, 0, 0, 0]
	turn = 1 # 1 for X and 0 for O
	print("Welcome to Tic Tac Toe")
	while(True):
		printBoard(xState, zState)
		if(turn == 1):
			print("X's Chance")
			value = int(input("Please enter a value: "))
			xState[value] = 1
		else:
			print("O's Chance")
			value = int(input("Please enter a value: "))
			zState[value] = 1
		cwin = checkWin(xState, zState)
		if(cwin != -1):
			print("Match over")
			break
		turn = 1 - turn